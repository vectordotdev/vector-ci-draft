# This workflow is used to run an integration test.
# The most common use case is that it is triggered by another workflow,
# such as the Master Merge Queue Suite, or the Integration Comment.
#
# It can also be triggered on manual dispatch in CI however.
# In that use case, an input for the test name needs to be provided.
# TODO: check if the input is "all" , and run all, without a timeout?

name: Integration Test

on:
  workflow_call:
    inputs:
      if:
         required: false
         type: boolean
      test_name:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      test_name:
        description: "Which integration to test."
        required: true
        type: string

env:
  AWS_ACCESS_KEY_ID: "dummy"
  AWS_SECRET_ACCESS_KEY: "dummy"
  AXIOM_TOKEN: ${{ secrets.AXIOM_TOKEN }}
  TEST_APPSIGNAL_PUSH_API_KEY: ${{ secrets.TEST_APPSIGNAL_PUSH_API_KEY }}
  CONTAINER_TOOL: "docker"
  DD_ENV: "ci"
  DD_API_KEY: ${{ secrets.DD_API_KEY }}
  RUST_BACKTRACE: full
  TEST_LOG: vector=debug
  VERBOSE: true
  CI: true
  PROFILE: debug

jobs:
  test-integration:
    runs-on: [linux, ubuntu-20.04-8core]
    if: inputs.if || github.event_name == 'workflow_dispatch'
    timeout-minutes: 30
    steps:
      # For PR comment trigger, extra steps are required to associate the workflow with the PR.

      # Find the branch that the comment was made in.
      - name: (PR comment) Get PR branch
        if: ${{ github.event_name == 'issue_comment' }}
        uses: xt0rted/pull-request-comment-branch@v1
        id: comment-branch

      # Checkout the branch, using the PR ref.
      - name: (PR comment) Checkout PR branch
        if: ${{ github.event_name == 'issue_comment' }}
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.comment-branch.outputs.head_ref }}

      # Checkout the default branch otherwise.
      - name: Checkout branch
        if: ${{ github.event_name != 'issue_comment' }}
        uses: actions/checkout@v3

      - name: mock
        run: echo "${{ inputs.test_name }}"

      # - run: make ci-sweep

      # - run: sudo npm -g install @datadog/datadog-ci

      # - run: make test-integration-${{ inputs.test_name }}
      #   env:
      #     TEST_DATADOG_API_KEY: ${{ secrets.CI_TEST_DATADOG_API_KEY }}
      #     # TODO: It looks like this used to be used but isn't anymore
      #     #SPLUNK_VERSION: ${{ matrix.env.SPLUNK_VERSION }}

      # - name: Upload test results
      #   run: scripts/upload-test-results.sh
      #   if: always()

      # - run: make test-integration-${{ inputs.test_name }}-cleanup
      #   if: ${{ always() }}
      #   env:
      #     TEST_DATADOG_API_KEY: ${{ secrets.CI_TEST_DATADOG_API_KEY }}
      #     # TODO: It looks like this used to be used but isn't anymore
      #     #SPLUNK_VERSION: ${{ matrix.env.SPLUNK_VERSION }}
