name: Test Suite

on:
  pull_request:
  merge_group:
    types: [checks_requested]
  push:
    branches:
      - master

concurrency:
  # For pull requests, cancel running workflows, for master, run all
  #
  # `github.event.number` exists for pull requests, otherwise fall back to SHA
  # for master
  group: ${{ github.workflow }}-${{ github.event.number || github.sha }}
  cancel-in-progress: true

env:
  AWS_ACCESS_KEY_ID: "dummy"
  AWS_SECRET_ACCESS_KEY: "dummy"
  CONTAINER_TOOL: "docker"
  DD_ENV: "ci"
  DD_API_KEY: ${{ secrets.DD_API_KEY }}
  RUST_BACKTRACE: full
  TEST_LOG: vector=debug
  VERBOSE: true
  CI: true
  PROFILE: debug
  # observing issues fetching boringssl via HTTPS in the OSX build, seeing if this helps
  # can be removed when we switch back to the upstream openssl-sys crate
  CARGO_NET_GIT_FETCH_WITH_CLI: true

jobs:
  changes:
    uses: ./.github/workflows/changes.yml
    secrets: inherit

  # Remove this once https://github.com/vectordotdev/vector/issues/3771 is closed.
  # Then, modify the `cross-linux` job to run `test` instead of `build`.
  test-linux:
    name: Unit - x86_64-unknown-linux-gnu
    runs-on: [linux, ubuntu-20.04-8core]
    needs: changes
    env:
      CARGO_INCREMENTAL: 0
    if: ${{ needs.changes.outputs.source == 'true' }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        name: Cache Cargo registry + index
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - run: sudo -E bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - run: bash scripts/environment/prepare.sh
      - run: echo "::add-matcher::.github/matchers/rust.json"
      - run: make test
        env:
          CARGO_BUILD_JOBS: 5
      - name: Upload test results
        run: scripts/upload-test-results.sh
        if: always()

  # test-cli:
  #   name: CLI - Linux
  #   runs-on: [linux, ubuntu-20.04-8core]
  #   needs: changes
  #   env:
  #     CARGO_INCREMENTAL: 0
  #   if: ${{ needs.changes.outputs.source == 'true' }}
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/cache@v3
  #       name: Cache Cargo registry + index
  #       with:
  #         path: |
  #           ~/.cargo/bin/
  #           ~/.cargo/registry/index/
  #           ~/.cargo/registry/cache/
  #           ~/.cargo/git/db/
  #         key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-cargo-
  #     - run: sudo -E bash scripts/environment/bootstrap-ubuntu-20.04.sh
  #     - run: bash scripts/environment/prepare.sh
  #     - run: echo "::add-matcher::.github/matchers/rust.json"
  #     - run: make test-cli
  #     - name: Upload test results
  #       run: scripts/upload-test-results.sh
  #       if: always()

  # test-misc:
  #   name: Miscellaneous - Linux
  #   runs-on: [linux, ubuntu-20.04-8core]
  #   needs: changes
  #   env:
  #     CARGO_INCREMENTAL: 0
  #   if: ${{ needs.changes.outputs.source == 'true' }}
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/cache@v3
  #       name: Cache Cargo registry + index
  #       with:
  #         path: |
  #           ~/.cargo/bin/
  #           ~/.cargo/registry/index/
  #           ~/.cargo/registry/cache/
  #           ~/.cargo/git/db/
  #         key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-cargo-
  #     - run: sudo -E bash scripts/environment/bootstrap-ubuntu-20.04.sh
  #     - run: bash scripts/environment/prepare.sh
  #     - run: echo "::add-matcher::.github/matchers/rust.json"
  #     - run: make test-behavior
  #     - run: make check-examples
  #     - run: make test-docs

  # cross-linux:
  #   name: Cross - ${{ matrix.target }}
  #   runs-on: [linux, ubuntu-20.04-8core]
  #   needs: changes
  #   env:
  #     CARGO_INCREMENTAL: 0
  #   strategy:
  #     matrix:
  #       target:
  #         - x86_64-unknown-linux-gnu
  #         - x86_64-unknown-linux-musl
  #         - aarch64-unknown-linux-gnu
  #         - aarch64-unknown-linux-musl
  #         - armv7-unknown-linux-gnueabihf
  #         - armv7-unknown-linux-musleabihf

  #   # We run cross checks when dependencies change to ensure they still build.
  #   # This helps us avoid adopting dependencies that aren't compatible with other architectures.
  #   if: ${{ needs.changes.outputs.dependencies == 'true' }}
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/cache@v3
  #       name: Cache Cargo registry + index
  #       with:
  #         path: |
  #           ~/.cargo/bin/
  #           ~/.cargo/registry/index/
  #           ~/.cargo/registry/cache/
  #           ~/.cargo/git/db/
  #         key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-cargo-
  #     - run: echo "::add-matcher::.github/matchers/rust.json"
  #     - run: 'cargo install cross --version 0.2.4 --force --locked'
  #     # Why is this build, not check? Because we need to make sure the linking phase works.
  #     # aarch64 and musl in particular are notoriously hard to link.
  #     # While it may be tempting to slot a `check` in here for quickness, please don't.
  #     - run: make cross-build-${{ matrix.target }}
  #     - uses: actions/upload-artifact@v3
  #       with:
  #         name: "vector-debug-${{ matrix.target }}"
  #         path: "./target/${{ matrix.target }}/debug/vector"

  # cross-linux-check:
  #   if: ${{ needs.changes.outputs.dependencies == 'true' }}
  #   runs-on: ubuntu-20.04
  #   name: Cross - Linux
  #   needs: cross-linux
  #   steps:
  #     - name: Check cross matrix status
  #       if: ${{ needs.cross-linux.result != 'success' }}
  #       run: exit 1

  # test-windows:
  #   name: Unit - Windows
  #   runs-on: [windows, windows-2019-8core]
  #   needs: changes
  #   if: ${{ needs.changes.outputs.source == 'true' }}
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: .\scripts\environment\bootstrap-windows-2019.ps1
  #     - run: make test

  # test-vrl:
  #   name: VRL - Linux
  #   continue-on-error: true
  #   runs-on: [linux, ubuntu-20.04-8core]
  #   needs: changes
  #   if: ${{ needs.changes.outputs.source == 'true' || needs.changes.outputs.cue == 'true' }}
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: sudo -E bash scripts/environment/bootstrap-ubuntu-20.04.sh
  #     - run: bash scripts/environment/prepare.sh
  #     - run: cargo vdev test-vrl

  # check-component-features:
  #   name: Component Features - Linux
  #   runs-on: [linux, ubuntu-20.04-8core]
  #   needs: changes
  #   if: ${{ needs.changes.outputs.source == 'true' }}
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: sudo -E bash scripts/environment/bootstrap-ubuntu-20.04.sh
  #     - run: bash scripts/environment/prepare.sh
  #     - run: echo "::add-matcher::.github/matchers/rust.json"
  #     - run: make check-component-features

  # check-msrv:
  #   name: Check minimum supported Rust version
  #   runs-on: [linux, ubuntu-20.04-8core]
  #   needs: changes
  #   if: ${{ needs.changes.outputs.source == 'true' }}
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: sudo -E bash scripts/environment/bootstrap-ubuntu-20.04.sh
  #     - run: cargo install cargo-msrv --version 0.15.1
  #     - run: cargo msrv verify

  checks:
    name: Checks
    runs-on: [linux, ubuntu-20.04-8core]
    needs: changes
    env:
      CARGO_INCREMENTAL: 0
    steps:
      - uses: actions/checkout@v3
        with:
          # check-version needs tags
          fetch-depth: 0 # fetch everything
      - run: sudo -E bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - run: bash scripts/environment/prepare.sh
      - uses: actions/cache@v3
        name: Cache Cargo registry + index
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Enable Rust matcher
        run: echo "::add-matcher::.github/matchers/rust.json"
      - name: Check code format
        run: make check-fmt
      - name: Check clippy
        if: needs.changes.outputs.source == 'true'
        run: make check-clippy
      - name: Check version
        run: make check-version
      - name: Check scripts
        run: make check-scripts
      - name: Check events
        if: needs.changes.outputs.source == 'true'
        run: make check-events
      - name: Check cargo deny advisories/licenses
        if: needs.changes.outputs.dependencies == 'true' || needs.changes.outputs.deny == 'true'
        run: make check-deny
      - name: Check Cue docs
        if: needs.changes.outputs.cue == 'true'
        run: make check-docs
      - name: Check Markdown
        if: needs.changes.outputs.markdown == 'true'
        run: make check-markdown
      - name: Check Component Docs
        if: needs.changes.outputs.source == 'true' || needs.changes.outputs.component_docs == 'true'
        run: make check-component-docs
      - name: Check Rust Docs
        if: needs.changes.outputs.source == 'true'
        run: cd rust-doc && make docs
      - uses: actions/upload-artifact@v3
        with:
          name: "config-schema.json"
          path: "/tmp/vector-config-schema.json"
        if: success() || failure()

  master-failure:
    name: master-failure
    if: failure() && github.ref == 'refs/heads/master'
    needs:
      - changes
      #- cross-linux
      #- test-misc
      - test-linux
      #- test-windows
      #- test-vrl
      #- check-component-features
      - checks
    runs-on: ubuntu-20.04
    steps:
    - name: Discord notification
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      uses: Ilshidur/action-discord@0.3.2
      with:
        args: "Master tests failed: <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}>"
