name: Test Suite

on:
  pull_request:
  merge_group:
    types: [checks_requested]

concurrency:
  # `github.event.number` exists for pull requests, otherwise fall back to SHA for merge queue
  group: ${{ github.workflow }}-${{ github.event.number || github.event.merge_group.base_sha }}
  cancel-in-progress: true

env:
  AWS_ACCESS_KEY_ID: "dummy"
  AWS_SECRET_ACCESS_KEY: "dummy"
  CONTAINER_TOOL: "docker"
  DD_ENV: "ci"
  DD_API_KEY: ${{ secrets.DD_API_KEY }}
  RUST_BACKTRACE: full
  TEST_LOG: vector=debug
  VERBOSE: true
  CI: true
  PROFILE: debug
  # observing issues fetching boringssl via HTTPS in the OSX build, seeing if this helps
  # can be removed when we switch back to the upstream openssl-sys crate
  CARGO_NET_GIT_FETCH_WITH_CLI: true

jobs:
  changes:
    uses: ./.github/workflows/changes.yml
    secrets: inherit
    with:
      base_ref: ${{ github.event.merge_group.base_ref || github.event.pull_request.base.ref }}
      head_ref: ${{ github.event.merge_group.head_ref || github.event.pull_request.head.ref }}

  # Remove this once https://github.com/vectordotdev/vector/issues/3771 is closed.
  # Then, modify the `cross-linux` job to run `test` instead of `build`.
  test-linux:
    name: Unit - x86_64-unknown-linux-gnu
    runs-on: [linux, ubuntu-20.04-8core]
    needs: changes
    env:
      CARGO_INCREMENTAL: 0
    if: ${{ needs.changes.outputs.source == 'true' }}
    steps:
      - name: mock
        run: echo "OK"
      # - uses: actions/checkout@v3
      # - uses: actions/cache@v3
      #   name: Cache Cargo registry + index
      #   with:
      #     path: |
      #       ~/.cargo/bin/
      #       ~/.cargo/registry/index/
      #       ~/.cargo/registry/cache/
      #       ~/.cargo/git/db/
      #     key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-cargo-
      # - run: sudo -E bash scripts/environment/bootstrap-ubuntu-20.04.sh
      # - run: bash scripts/environment/prepare.sh
      # - run: echo "::add-matcher::.github/matchers/rust.json"
      # - run: make test
      #   env:
      #     CARGO_BUILD_JOBS: 5
      # - name: Upload test results
      #   run: scripts/upload-test-results.sh
      #   if: always()

  test-vrl:
    name: VRL - Linux
    continue-on-error: true
    runs-on: [linux, ubuntu-20.04-8core]
    needs: changes
    if: ${{ needs.changes.outputs.source == 'true' || needs.changes.outputs.cue == 'true' }}
    steps:
      - name: mock
        run: echo "OK"
      # - uses: actions/checkout@v3
      # - run: sudo -E bash scripts/environment/bootstrap-ubuntu-20.04.sh
      # - run: bash scripts/environment/prepare.sh
      # - run: cargo vdev test-vrl

  checks:
    name: Checks
    runs-on: [linux, ubuntu-20.04-8core]
    needs: changes
    env:
      CARGO_INCREMENTAL: 0
    steps:
      - name: mock
        run: echo "OK"

      # - uses: actions/checkout@v3
      #   with:
      #     # check-version needs tags
      #     fetch-depth: 0 # fetch everything
      # - run: sudo -E bash scripts/environment/bootstrap-ubuntu-20.04.sh
      # - run: bash scripts/environment/prepare.sh
      # - uses: actions/cache@v3
      #   name: Cache Cargo registry + index
      #   with:
      #     path: |
      #       ~/.cargo/bin/
      #       ~/.cargo/registry/index/
      #       ~/.cargo/registry/cache/
      #       ~/.cargo/git/db/
      #     key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-cargo-
      # - name: Enable Rust matcher
      #   run: echo "::add-matcher::.github/matchers/rust.json"
      # - name: Check code format
      #   run: make check-fmt
      # - name: Check clippy
      #   if: needs.changes.outputs.source == 'true'
      #   run: make check-clippy
      # #- name: Check version
      # #  run: make check-version
      # - name: Check scripts
      #   run: make check-scripts
      # - name: Check events
      #   if: needs.changes.outputs.source == 'true'
      #   run: make check-events
      # - name: Check cargo deny advisories/licenses
      #   if: needs.changes.outputs.dependencies == 'true' || needs.changes.outputs.deny == 'true'
      #   run: make check-deny
      # - name: Check Cue docs
      #   if: needs.changes.outputs.cue == 'true'
      #   run: make check-docs
      # - name: Check Markdown
      #   if: needs.changes.outputs.markdown == 'true'
      #   run: make check-markdown
      # - name: Check Component Docs
      #   if: needs.changes.outputs.source == 'true' || needs.changes.outputs.component_docs == 'true'
      #   run: make check-component-docs
      # - name: Check Rust Docs
      #   if: needs.changes.outputs.source == 'true'
      #   run: cd rust-doc && make docs
      # - uses: actions/upload-artifact@v3
      #   with:
      #     name: "config-schema.json"
      #     path: "/tmp/vector-config-schema.json"
      #   if: success() || failure()

  all-checks:
    name: Test Suite
    runs-on: ubuntu-20.04
    needs:
      - checks
      - test-vrl
      - test-linux
    steps:
      - name: validate
        run: echo "OK"

